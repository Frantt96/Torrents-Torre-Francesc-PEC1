View(data)
View(se_object)
View(row_metadata)
View(se_object)
View(se_object)
assays(se_object)$counts
View(data)
# Separar los datos en matriz de expresión (metabolitos) y metadatos (ID de paciente y pérdida de músculo)
# La primera columna es el ID del paciente y no tiene nombre
expression_data <- as.matrix(data[, 2:ncol(data)])  # Obtener las columnas de metabolitos
# Crear los metadatos para las filas y columnas
# Usar la primera columna como los IDs de paciente
rownames(expression_data) <- data[[1]]  # Asignar los nombres de los pacientes desde la primera columna (sin nombre)
row_metadata <- data.frame(Muscle_loss = data$Muscle.loss, row.names = rownames(expression_data))
Separar los datos en matriz de expresión (metabolitos) y metadatos (ID de paciente y pérdida de músculo)
# Separar los datos en matriz de expresión (metabolitos) y metadatos (ID de paciente y pérdida de músculo)
# La primera columna es el ID del paciente y no tiene nombre
expression_data <- as.matrix(data[, 2:ncol(data)])  # Obtener las columnas de metabolitos
# Crear los metadatos para las filas y columnas
# Usar la primera columna como los IDs de paciente
rownames(expression_data) <- data[[1]]  # Asignar los nombres de los pacientes desde la primera columna (sin nombre)
row_metadata <- data.frame(Muscle_loss = data$Muscle.loss, row.names = rownames(expression_data))
# Separar los datos en matriz de expresión (metabolitos) y metadatos (ID de paciente y pérdida de músculo)
# Extrayendo las columnas de metabolitos como una matriz de expresión
expression_data <- as.matrix(data[, 2:ncol(data)])  # Cambiado a 2:ncol(data) asumiendo que la primera columna no es metabolito.
# Crear los metadatos para las filas y columnas
# Utilizamos el índice de fila como el Patient_ID
rownames(expression_data) <- paste0("Patient_", seq_len(nrow(data)))  # Crea un ID de paciente ficticio
row_metadata <- data.frame(Muscle_loss = data$Muscle.loss, row.names = rownames(expression_data))
col_metadata <- data.frame(Metabolite = colnames(expression_data))
# Crear el objeto SummarizedExperiment
se_object <- SummarizedExperiment(assays = list(counts = expression_data),
rowData = row_metadata,
colData = col_metadata)
# Mostrar un resumen del objeto para verificar
se_object
View(expression_data)
View(col_metadata)
View(data)
View(expression_data)
View(data)
View(col_metadata)
View(expression_data)
View(row_metadata)
View(se_object)
View(row_metadata)
data <- read.csv("human_cachexia.csv", row.names = 1)  # Ajusta según tus datos
# Cargar los datos desde el archivo CSV
data <- read.csv("ruta/al/archivo/human_cachexia.csv")
# Separar los datos en matriz de expresión (metabolitos) y metadatos (ID de paciente y pérdida de músculo)
# Extrayendo las columnas de metabolitos como una matriz de expresión
expression_data <- as.matrix(data[, 2:ncol(data)])  # Cambiado a 2:ncol(data) asumiendo que la primera columna no es metabolito.
# Crear los metadatos para las filas y columnas
# Utilizamos el índice de fila como el Patient_ID
rownames(expression_data) <- paste0("Patient_", seq_len(nrow(data)))  # Crea un ID de paciente ficticio
row_metadata <- data.frame(Muscle_loss = data$Muscle.loss, row.names = rownames(expression_data))
col_metadata <- data.frame(Metabolite = colnames(expression_data))
# Crear el objeto SummarizedExperiment
se_object <- SummarizedExperiment(assays = list(counts = expression_data),
rowData = row_metadata,
colData = col_metadata)
# Mostrar un resumen del objeto para verificar
se_object
data
rowRanges(data)
colData(data)
data <- read.csv("human_cachexia.csv", header = TRUE, stringsAsFactors = FALSE))  # Ajusta según tus datos
data <- read.csv("human_cachexia.csv", header = TRUE, stringsAsFactors = FALSE)
colData(data)
View(data)
# Separar los datos en matriz de expresión (metabolitos) y metadatos (ID de paciente y pérdida de músculo)
# Extrayendo las columnas de metabolitos como una matriz de expresión
expression_data <- as.matrix(data[, 3:ncol(data)])
# Crear los metadatos para las filas y columnas
# - Filas: información del paciente (ID y condición de pérdida muscular)
# - Columnas: nombres de los metabolitos
row_metadata <- data.frame(Patient_ID = data$Patient.ID, Muscle_loss = data$Muscle.loss)
col_metadata <- data.frame(Metabolite = colnames(expression_data))
# Crear el objeto SummarizedExperiment
se_object <- SummarizedExperiment(assays = list(counts = expression_data),
rowData = row_metadata,
colData = col_metadata)
# Mostrar un resumen del objeto para verificar
se_object
data <- read.csv("human_cachexia.csv", header = TRUE, stringsAsFactors = FALSE)  # Ajusta según tus datos
# Separar los datos en matriz de expresión (metabolitos) y metadatos (ID de paciente y pérdida de músculo)
# Extrayendo las columnas de metabolitos como una matriz de expresión
expression_data <- as.matrix(data[, 3:ncol(data)])
# Crear los metadatos para las filas y columnas
# - Filas: información del paciente (ID y condición de pérdida muscular)
# - Columnas: nombres de los metabolitos
row_metadata <- data.frame(Patient_ID = data$Patient.ID, Muscle_loss = data$Muscle.loss)
col_metadata <- data.frame(Metabolite = colnames(expression_data))
# Crear el objeto SummarizedExperiment
se_object <- SummarizedExperiment(assays = list(counts = expression_data),
rowData = row_metadata,
colData = col_metadata)
# Mostrar un resumen del objeto para verificar
se_object
View(row_metadata)
View(se_object)
head(data)
View(data)
str(data)
summary(data)
missing_values <- colSums(is.na(data))
print(missing_values)
# Visualización de la distribución de los metabolitos
library(reshape2)
# Convertir los datos de metabolitos a formato largo para visualizar
expression_long <- melt(as.data.frame(expression_data))
# Histograma de metabolitos
ggplot(expression_long, aes(value)) +
geom_histogram(bins = 30) +
facet_wrap(~ variable, scales = "free") +
labs(title = "Distribución de Metabolitos", x = "Concentración", y = "Frecuencia")
summary(se_object)
data(data)
annotation(data)
normalized <- data %>%
PomaNorm(method = "log_pareto")
library(SummarizedExperiment)
library(dplyr)
normalized <- data %>%
PomaNorm(method = "log_pareto")
# Instalar el paquete POMA
BiocManager::install("POMA")
normalized <- data %>%
PomaNorm(method = "log_pareto")
# Instala BiocManager si no lo tienes instalado
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
# Instala el paquete POMA
BiocManager::install("POMA")
normalized <- data %>%
PomaNorm(method = "log_pareto")
PomaBoxplots(data, x = "samples")
ls("package:POMA")
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
# Instala el paquete POMA
BiocManager::install("POMA")
# Forzar la reinstalación del paquete POMA
BiocManager::install("POMA", force = TRUE
# Forzar la reinstalación del paquete POMA
BiocManager::install("POMA", force = TRUE)
# Forzar la reinstalación del paquete POMA
BiocManager::install("POMA", force = TRUE)
library(POMA)
View(expression_data)
View(data)
imputed <- data %>%
PomaImpute(method = "knn", zeros_as_na = TRUE, remove_na = TRUE, cutoff = 20)
normalized <- data %>%
PomaNorm(method = "log_pareto")
normalized <- se_object %>%
PomaNorm(method = "log_pareto")
PomaBoxplots(normalized, x = "samples")
PomaBoxplots(normalized)
PomaBoxplots(normalized, x = "samples")
PomaDensity(normalized)
PomaOutliers(normalized)$polygon_plot
library(POMA)
library(ggtext)
library(magrittr)
PomaBoxplots(imputed, x = "samples")
PomaOutliers(normalized)
PomaBoxplots(normalized, col = c("red", "blue", "green"))
PomaBoxplots(normalized,col = c("red", "blue", "green"))
PomaBoxplots(normalized, col = c("red", "blue", "green"))
install.packages("RColorBrewer")
library(RColorBrewer)
colors <- brewer.pal(n = 3, name = "Set1")  # Ajusta 'n' según el número de grupos que tengas
PomaBoxplots(normalized, col = colors)
PomaBoxplots(normalized, col = c("red", "blue", "green"))
PomaBoxplots(normalized)
View(se_object)
head(data)
str(data)
data <- read.csv("human_cachexia.csv", header = TRUE, stringsAsFactors = FALSE)  # Ajusta según tus datos
# Crear los metadatos para las filas y columnas
# - Filas: información del paciente (ID y condición de pérdida muscular)
# - Columnas: nombres de los metabolitos
row_metadata <- data.frame(Patient_ID = data$Patient.ID, Muscle_loss = data$Muscle.loss)
col_metadata <- data.frame(Metabolite = colnames(expression_data))
# Crear el objeto SummarizedExperiment
se_object <- SummarizedExperiment(assays = list(counts = expression_data),
rowData = row_metadata,
colData = col_metadata)
# Mostrar un resumen del objeto para verificar
se_object
data <- read.csv("human_cachexia.csv", header = TRUE, stringsAsFactors = FALSE)  # Ajusta según tus datos
# Crear los metadatos para las filas y columnas
# - Filas: información del paciente (ID y condición de pérdida muscular)
# - Columnas: nombres de los metabolitos
row_metadata <- data.frame(Patient_ID = data$Patient.ID, Muscle_loss = data$Muscle.loss)
col_metadata <- data.frame(Metabolite = colnames(expression_data))
data <- read.csv("human_cachexia.csv", header = TRUE, stringsAsFactors = FALSE)  # Ajusta según tus datos
# Separar los datos en matriz de expresión (metabolitos) y metadatos (ID de paciente y pérdida de músculo)
# Extrayendo las columnas de metabolitos como una matriz de expresión
expression_data <- as.matrix(data[, 3:ncol(data)])
metadata <- data.frame(Patient_ID = data$Patient.ID, Muscle_loss = data$Muscle.loss)
se <- SummarizedExperiment(
assays = list(counts = metabolite_data),
colData = metadata
)
data <- read.csv("human_cachexia.csv", header = TRUE, stringsAsFactors = FALSE)  # Ajusta según tus datos
# Separar los datos en matriz de expresión (metabolitos) y metadatos (ID de paciente y pérdida de músculo)
# Extrayendo las columnas de metabolitos como una matriz de expresión
expression_data <- as.matrix(data[, 3:ncol(data)])
metadata <- data.frame(Patient_ID = data$Patient.ID, Muscle_loss = data$Muscle.loss)
se <- SummarizedExperiment(
assays = list(counts = expression_data),
colData = metadata
)
View(expression_data)
View(metadata)
View(expression_data)
se <- SummarizedExperiment(
assays = list(counts = expression_data),
colData = metadata
)
nrow(expression_data) == 77
nrow(metadata) == 77
data <- read.csv("human_cachexia.csv", header = TRUE, stringsAsFactors = FALSE)  # Ajusta según tus datos
# Separar los datos en matriz de expresión (metabolitos) y metadatos (ID de paciente y pérdida de músculo)
# Extrayendo las columnas de metabolitos como una matriz de expresión
expression_data <- as.matrix(data[, 3:ncol(data)])
# Crear los metadatos para las filas y columnas
# - Filas: información del paciente (ID y condición de pérdida muscular)
# - Columnas: nombres de los metabolitos
row_metadata <- data.frame(Patient_ID = data$Patient.ID, Muscle_loss = data$Muscle.loss)
col_metadata <- data.frame(Metabolite = colnames(expression_data))
# Crear el objeto SummarizedExperiment
se_object <- SummarizedExperiment(assays = list(counts = expression_data),
rowData = row_metadata,
colData = col_metadata)
# Mostrar un resumen del objeto para verificar
se_object
View(se_object)
View(se_object)
# Crear el metadata consolidado que contenga los metadatos de las muestras
# Aquí usamos colData para describir tanto la información del paciente como los metabolitos.
metadata <- data.frame(
Patient_ID = data$Patient.ID,
Muscle_loss = data$Muscle.loss,
stringsAsFactors = FALSE
)
# Crear el objeto SummarizedExperiment
library(SummarizedExperiment)
se <- SummarizedExperiment(
assays = list(counts = expression_data),
colData = metadata
)
data <- read.csv("human_cachexia.csv", header = TRUE, stringsAsFactors = FALSE)  # Ajusta según tus datos
# Separar los datos en matriz de expresión (metabolitos) y metadatos (ID de paciente y pérdida de músculo)
# Extrayendo las columnas de metabolitos como una matriz de expresión
expression_data <- as.matrix(data[, 3:ncol(data)])
# Crear los metadatos para las filas y columnas
# - Filas: información del paciente (ID y condición de pérdida muscular)
# - Columnas: nombres de los metabolitos
row_metadata <- data.frame(Patient_ID = data$Patient.ID, Muscle_loss = data$Muscle.loss)
col_metadata <- data.frame(Metabolite = colnames(expression_data))
# Crear el objeto SummarizedExperiment
se <- SummarizedExperiment(assays = list(counts = expression_data),
rowData = row_metadata,
colData = col_metadata)
# Mostrar un resumen del objeto para verificar
se
rownames(expression_data) <- data$Patient.ID
# Crear los metadatos para las filas y columnas
# - Filas: información del paciente (ID y condición de pérdida muscular)
# - Columnas: nombres de los metabolitos
row_metadata <- data.frame(Patient_ID = data$Patient.ID, Muscle_loss = data$Muscle.loss)
col_metadata <- data.frame(Metabolite = colnames(expression_data))
# Crear el objeto SummarizedExperiment
se <- SummarizedExperiment(assays = list(counts = expression_data),
rowData = row_metadata,
colData = col_metadata)
# Mostrar un resumen del objeto para verificar
se
View(data)
View(expression_data)
data <- read.csv("human_cachexia.csv", header = TRUE, stringsAsFactors = FALSE)  # Ajusta según tus datos
# Separar los datos en matriz de expresión (metabolitos) y metadatos (ID de paciente y pérdida de músculo)
# Extrayendo las columnas de metabolitos como una matriz de expresión
expression_data <- as.matrix(data[, 3:ncol(data)])
rownames(expression_data) <- data$Patient.ID
# Crear los metadatos para las filas y columnas
# - Filas: información del paciente (ID y condición de pérdida muscular)
# - Columnas: nombres de los metabolitos
row_metadata <- data.frame(Patient_ID = data$Patient.ID, Muscle_loss = data$Muscle.loss)
col_metadata <- data.frame(Metabolite = colnames(expression_data))
# Crear el objeto SummarizedExperiment
se <- SummarizedExperiment(assays = list(counts = expression_data),
rowData = row_metadata,
colData = col_metadata)
# Mostrar un resumen del objeto para verificar
se
# Boxplot de los metabolitos
boxplot(expression_data, main = "Distribución de Metabolitos", las = 2)
View(expression_data)
library(pheatmap)
install.packages("pheatmap")
library(pheatmap)
# Crear un heatmap de los datos de expresión
pheatmap(expression_data, scale = "row", clustering_distance_rows = "euclidean", clustering_distance_cols = "euclidean", main = "Heatmap de Metabolitos")
# Normalizar por fila (centrado y escalado)
normalized_data <- scale(expression_data, center = TRUE, scale = TRUE)
# Generar el heatmap con los datos normalizados
library(pheatmap)
pheatmap(normalized_data, scale = "none",  # Ya hemos normalizado
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
main = "Heatmap de Metabolitos Normalizados")
# Normalización por la suma total (columna)
normalized_data_total <- expression_data / rowSums(expression_data)
# Generar el heatmap con los datos normalizados
pheatmap(normalized_data_total, scale = "none",  # Ya hemos normalizado
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
main = "Heatmap de Metabolitos Normalizados por Suma Total")
# Normalizar por fila (centrado y escalado)
normalized_data <- scale(expression_data, center = TRUE, scale = TRUE)
# Generar el heatmap con los datos normalizados
library(pheatmap)
pheatmap(normalized_data, scale = "none",  # Ya hemos normalizado
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
main = "Heatmap de Metabolitos Normalizados")
install.packages("pheatmap")
library(pheatmap)
# Crear un heatmap de los datos de expresión
pheatmap(expression_data, scale = "row", clustering_distance_rows = "euclidean", clustering_distance_cols = "euclidean", main = "Heatmap de Metabolitos")
# Boxplot de los metabolitos
boxplot(expression_data, main = "Distribución de Metabolitos", las = 2)
# Normalizar por fila (centrado y escalado)
normalized_data <- scale(expression_data, center = TRUE, scale = TRUE)
# Crear el boxplot de los datos normalizados
boxplot(normalized_data, main = "Distribución de Metabolitos Normalizados", las = 2)
# Crear el boxplot con tamaño de fuente ajustado
boxplot(normalized_data,
main = "Distribución de Metabolitos Normalizados",
las = 2,
cex.axis = 0.5)  # Reduce el tamaño de los textos en el eje x
# Crear el boxplot con nombres más rotados
boxplot(normalized_data,
main = "Distribución de Metabolitos Normalizados",
las = 2,
cex.axis = 0.7)  # Cambia el tamaño si es necesario
# Crear el boxplot de los datos normalizados
boxplot(normalized_data, main = "Distribución de Metabolitos Normalizados", las = 2)
# Crear el boxplot con nombres más rotados
boxplot(normalized_data,
main = "Distribución de Metabolitos Normalizados",
las = 2,
cex.axis = 0.7)  # Cambia el tamaño si es necesario
# Ajustar los márgenes del gráfico
par(mar = c(10, 4, 4, 2))  # Aumenta el margen inferior (10 es el valor estándar)
boxplot(normalized_data,
main = "Distribución de Metabolitos Normalizados",
las = 2,
cex.axis = 0.7)
# Crear el boxplot con nombres más rotados
boxplot(normalized_data,
main = "Distribución de Metabolitos Normalizados",
las = 2,
cex.axis = 0.7)  # Cambia el tamaño si es necesario
# Crear el boxplot con nombres más rotados
boxplot(normalized_data,
main = "Distribución de Metabolitos Normalizados",
las = 2,
cex.axis = 0.7)  # Cambia el tamaño si es necesario
# Ajustar los márgenes del gráfico
par(mar = c(10, 4, 4, 2))  # Aumenta el margen inferior (10 es el valor estándar)
boxplot(normalized_data,
main = "Distribución de Metabolitos Normalizados",
las = 2,
cex.axis = 0.7)
# Crear el boxplot con nombres más rotados
boxplot(normalized_data,
main = "Distribución de Metabolitos Normalizados",
las = 2,
cex.axis = 0.7)  # Cambia el tamaño si es necesario
# Realizar PCA sobre los datos de expresión (centrado y escalado)
pca_result <- prcomp(t(expression_data), scale. = TRUE)
# Ver el resumen del PCA
summary(pca_result)
# Graficar los primeros dos componentes principales
plot(pca_result$x[, 1:2], col = as.factor(row_metadata$Muscle_loss),
main = "PCA de las muestras", xlab = "PC1", ylab = "PC2")
# Normalizar los datos (centrado y escalado)
normalized_data <- scale(expression_data, center = TRUE, scale = TRUE)
# Realizar el PCA
pca_result <- prcomp(normalized_data)
# Visualizar el PCA
summary(pca_result)
plot(pca_result$x[, 1:2], main = "PCA de los Metabolitos", xlab = "PC1", ylab = "PC2")
normalized <- se_object %>%
PomaNorm(method = "log_pareto")
normalized <- se %>%
PomaNorm(method = "log_pareto")
PomaBoxplots(normalized)
PomaDensity(normalized)
PomaOutliers(normalized)
normalized<-PlotNormSummary(normalized, "norm_0_", format ="png", dpi=72, width=NA);
# Load MetaboAnalystR
library(MetaboAnalystR)
install.packages("remotes")
remotes::install_github("xia-lab/MetaboAnalystR")
PomaDensity(normalized)
PomaOutliers(normalized)
PomaOutliers(normalized)
PomaDensity(normalized)
library(ggplot2)
pca_result <- prcomp(t(assay(se)))  # Transponer la matriz de expresión
pca_data <- data.frame(pca_result$x)
ggplot(pca_data, aes(PC1, PC2, color = colData(se)$group)) +
geom_point() +
labs(title = "PCA de las Muestras", x = "PC1", y = "PC2")
library(ggplot2)
pca_result <- prcomp(t(assay(normalized)))  # Transponer la matriz de expresión
pca_data <- data.frame(pca_result$x)
ggplot(pca_data, aes(PC1, PC2, color = colData(se)$group)) +
geom_point() +
labs(title = "PCA de las Muestras", x = "PC1", y = "PC2")
library(pheatmap)
pheatmap(assay(normalized), scale = "row", clustering_distance_rows = "euclidean", clustering_distance_cols = "euclidean", main = "Heatmap de Expresión")
boxplot(assay(normalized), main = "Boxplot de los Metabolitos", las = 2)
logFC <- log2(assay(normalized)["Metabolite", "Condition_2"] / assay(se)["Metabolite", "Condition_1"])
# Asegúrate de tener los datos de expresión procesados
library(DESeq2)
dds <- DESeqDataSet(normalized, design = ~ condition)
cor_matrix <- cor(assay(normalized))
heatmap(cor_matrix, main = "Matriz de Correlación de Metabolitos")
library(Rtsne)
install.packages("Rtsne")
library(Rtsne)
library(Rtsne)
tsne_result <- Rtsne(t(assay(normalized)))
hist(assay(normalized)[, 1], main = "Distribución de la Expresión del Metabolito 1", xlab = "Valor de Expresión")
boxplot(assay(normalized) ~ colData(normalized)$condition, main = "Boxplot de Expresión entre Condiciones")
View(normalized)
library(ggplot2)
pca_result <- prcomp(t(assay(normalized)))  # Transponer la matriz de expresión
pca_data <- data.frame(pca_result$x)
ggplot(pca_data, aes(PC1, PC2, color = colData(se)$group)) +
geom_point() +
labs(title = "PCA de las Muestras", x = "PC1", y = "PC2")
library(pheatmap)
pheatmap(assay(normalized), scale = "row", clustering_distance_rows = "euclidean", clustering_distance_cols = "euclidean", main = "Heatmap de Expresión")
boxplot(assay(normalized), main = "Boxplot de los Metabolitos", las = 2)
cor_matrix <- cor(assay(normalized))
heatmap(cor_matrix, main = "Matriz de Correlación de Metabolitos")
normalized_data <- scale(expression_data, center = TRUE, scale = TRUE)
# Generar el heatmap con los datos normalizados
library(pheatmap)
pheatmap(normalized_data, scale = "none",  # Ya hemos normalizado
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
main = "Heatmap de Metabolitos Normalizados")
knitr::opts_chunk$set(echo = TRUE)
library(SummarizedExperiment)
library(magrittr)
options(repos = c(CRAN = "https://cloud.r-project.org/"))
install.packages("devtools")
library(POMA)
PomaDensity(normalized)
PomaBoxplots(normalized)
PomaBoxplots(normalized)
library(ggplot2)
pca_result <- prcomp(t(assay(normalized)))  # Transponer la matriz de expresión
pca_data <- data.frame(pca_result$x)
ggplot(pca_data, aes(PC1, PC2, color = colData(se)$group)) +
geom_point() +
labs(title = "PCA de las Muestras", x = "PC1", y = "PC2")
library(pheatmap)
pheatmap(assay(normalized), scale = "row", clustering_distance_rows = "euclidean", clustering_distance_cols = "euclidean", main = "Heatmap de Expresión")
knitr::opts_chunk$set(echo = TRUE)
library(SummarizedExperiment)
library(magrittr)
options(repos = c(CRAN = "https://cloud.r-project.org/"))
install.packages("devtools")
library(POMA)
library(pheatmap)
pheatmap(assay(normalized), scale = "row", clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean", main = "Heatmap de Expresión")
boxplot(assay(normalized), main = "Boxplot de los Metabolitos", las = 2)
cor_matrix <- cor(assay(normalized))
heatmap(cor_matrix, main = "Matriz de Correlación de Metabolitos")
library(pheatmap)
pheatmap(assay(normalized), scale = "row", clustering_distance_rows = "euclidean", clustering_distance_cols = "euclidean", main = "Heatmap de Expresión")
View(normalized)
View(expression_data)
View(data)
boxplot(assay(normalized), main = "Boxplot de los Metabolitos", las = 2)
boxplot(assay(normalized), main = "Boxplot de los Metabolitos", las = 2, cex.axis = 0.7)
boxplot(assay(normalized), main = "Boxplot de los Metabolitos", las = 2)
debugSource("C:/Users/frant/Documents/OMICS/GITHUB FRAN/PEC_1/PEC.R", echo=TRUE)
boxplot(assay(normalized), main = "Boxplot de los Metabolitos", las = 2, cex.axis = 0.7)
boxplot(assay(normalized), main = "Boxplot de los Metabolitos", las = 2, cex.axis = 0.5)
boxplot(assay(normalized), main = "Boxplot de los Metabolitos", las = 2, cex.axis = 0.5)
boxplot(assay(normalized), main = "Boxplot de los Metabolitos", las = 2, cex.axis = 0.2)
boxplot(assay(normalized), main = "Boxplot de los Metabolitos", las = 2, cex.axis = 0.3)
boxplot(assay(normalized), main = "Boxplot de los Metabolitos", las = 2, cex.axis = 0.2)
boxplot(assay(normalized), main = "Boxplot de los Metabolitos", las = 2, cex.axis = 0.4)
boxplot(assay(normalized), main = "Boxplot de los Metabolitos", las = 2, cex.axis = 0.7)
cor_matrix <- cor(assay(normalized))
heatmap(cor_matrix, main = "Matriz de Correlación de Metabolitos")
PomaBoxplots(normalized)
